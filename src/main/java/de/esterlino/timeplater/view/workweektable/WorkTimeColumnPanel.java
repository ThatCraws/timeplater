/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package de.esterlino.timeplater.view.workweektable;

import de.esterlino.timeplater.view.content.Content;
import de.esterlino.timeplater.worktimes.model.WorkTime;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.time.LocalTime;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;

/**
 *
 * @author Julien
 */
public class WorkTimeColumnPanel extends JPanel implements Content {
    private WorkTime workTime = null;

    /**
     * Creates new form WorkTimePanel
     */
    public WorkTimeColumnPanel(final WorkTime workTime) {
        this.workTime = workTime;
        initComponents();
        
        startTimeTextField.setVisible(false);
        endTimeTextField.setVisible(false);
        updateControls();
    }
    
    public WorkTimeColumnPanel() {
        this(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        startTimeTextField = new JTextField();
        endTimeTextField = new JTextField();
        startTimeLabel = new JLabel();
        startEndSeparatorLabel = new JLabel();
        endTimeLabel = new JLabel();
        workDurationPanel = new JPanel();
        workDurationPrefixLabel = new JLabel();
        workDurationLabel = new JLabel();
        workDurationPostfixLabel = new JLabel();

        setBackground(UIManager.getDefaults().getColor("Table.background"));
        setLayout(new GridBagLayout());

        startTimeTextField.setColumns(3);
        startTimeTextField.setHorizontalAlignment(JTextField.CENTER);
        startTimeTextField.setText("00:00");
        startTimeTextField.setNextFocusableComponent(endTimeTextField);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(3, 7, 5, 4);
        add(startTimeTextField, gridBagConstraints);

        endTimeTextField.setColumns(3);
        endTimeTextField.setHorizontalAlignment(JTextField.CENTER);
        endTimeTextField.setText("00:00");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(3, 7, 5, 4);
        add(endTimeTextField, gridBagConstraints);

        startTimeLabel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        startTimeLabel.setText("00:00");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(3, 7, 5, 4);
        add(startTimeLabel, gridBagConstraints);

        startEndSeparatorLabel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        startEndSeparatorLabel.setText("-");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(3, 7, 5, 4);
        add(startEndSeparatorLabel, gridBagConstraints);

        endTimeLabel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        endTimeLabel.setText("00:00");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(3, 7, 5, 4);
        add(endTimeLabel, gridBagConstraints);

        workDurationPanel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        workDurationPanel.setLayout(new GridBagLayout());

        workDurationPrefixLabel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        workDurationPrefixLabel.setText("(");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(3, 7, 5, 0);
        workDurationPanel.add(workDurationPrefixLabel, gridBagConstraints);

        workDurationLabel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        workDurationLabel.setText("00:00");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(3, 0, 5, 0);
        workDurationPanel.add(workDurationLabel, gridBagConstraints);

        workDurationPostfixLabel.setBackground(UIManager.getDefaults().getColor("Table.background"));
        workDurationPostfixLabel.setText(")");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(3, 0, 5, 4);
        workDurationPanel.add(workDurationPostfixLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        add(workDurationPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel endTimeLabel;
    private JTextField endTimeTextField;
    private JLabel startEndSeparatorLabel;
    private JLabel startTimeLabel;
    private JTextField startTimeTextField;
    private JLabel workDurationLabel;
    private JPanel workDurationPanel;
    private JLabel workDurationPostfixLabel;
    private JLabel workDurationPrefixLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setEnabled(final boolean enabled) {
        super.setEnabled(enabled);
        startTimeLabel.setEnabled(enabled);
        startEndSeparatorLabel.setEnabled(enabled);
        endTimeLabel.setEnabled(enabled);
        workDurationLabel.setEnabled(enabled);
        workDurationPrefixLabel.setEnabled(enabled);
        workDurationPostfixLabel.setEnabled(enabled);
    }
    
    @Override
    public Object getContent() {
        WorkTime toRet = new WorkTime(LocalTime.parse(startTimeTextField.getText()), LocalTime.parse(endTimeTextField.getText()));
        return toRet;
    }

    @Override
    public void _setContent(Object content) {
        workTime = (WorkTime) content;
        updateControls();
    }

    private void updateControls() {
        if (workTime == null) {
            startTimeTextField.setText("00:00");
            endTimeTextField.setText("00:00");
            startTimeLabel.setText("00:00");
            endTimeLabel.setText("00:00");
            workDurationLabel.setText("00:00");
            
            return;
        }
        
        String startTimeString = String.format("%d:%d", workTime.getStartTime().getHour(), workTime.getStartTime().getMinute());
        String endTimeString = String.format("%d:%d", workTime.getEndTime().getHour(), workTime.getEndTime().getMinute());
        startTimeTextField.setText(startTimeString);
        endTimeTextField.setText(endTimeString);
        startTimeLabel.setText(startTimeString);
        endTimeLabel.setText(endTimeString);
        
        String hoursPart = String.valueOf(workTime.getWorkDuration().toHoursPart());
        String minutesPart = String.valueOf(workTime.getWorkDuration().toMinutesPart());
        String workDurationString = String.format("%s:%s", hoursPart.length() == 2 ? hoursPart : "0" + hoursPart, minutesPart.length() == 2 ? minutesPart : "0" + minutesPart);
        workDurationLabel.setText(workDurationString);
    }
}
